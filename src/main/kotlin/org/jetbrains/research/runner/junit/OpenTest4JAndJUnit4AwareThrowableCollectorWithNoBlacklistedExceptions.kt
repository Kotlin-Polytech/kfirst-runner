package org.jetbrains.research.runner.junit

import org.junit.platform.commons.util.ReflectionUtils
import org.junit.platform.engine.support.hierarchical.ThrowableCollector
import org.opentest4j.TestAbortedException
import java.lang.invoke.MethodHandles
import java.util.*
import java.util.function.Predicate

class OpenTest4JAndJUnit4AwareThrowableCollectorWithNoBlacklistedExceptions :
    ThrowableCollector(abortedExecutionPredicate) {
    companion object {
        private val abortedExecutionPredicate: Predicate<in Throwable> = createAbortedExecutionPredicate()

        private fun createAbortedExecutionPredicate(): Predicate<in Throwable> {
            Objects.requireNonNull(TestAbortedException::class.java)
            val otaPredicate: Predicate<Throwable> =
                Predicate<Throwable> { obj -> TestAbortedException::class.java.isInstance(obj) }
            val clazz = ReflectionUtils.tryToLoadClass("org.junit.internal.AssumptionViolatedException")
                .toOptional()
                .orElse(null)
            return if (clazz != null) {
                Objects.requireNonNull(clazz)
                otaPredicate.or { obj -> clazz.isInstance(obj) }
            } else {
                otaPredicate
            }
        }

        private val addMethod = ThrowableCollector::class.java.getDeclaredMethod("add", Throwable::class.java)

        init {
            addMethod.isAccessible = true
        }

        private val addMethodHandle = MethodHandles.lookup().unreflect(addMethod)
    }

    override fun execute(executable: Executable) {
        try {
            executable.execute()
        } catch (t: Throwable) {
            addMethodHandle.invoke(this, t)
        }
    }
}
